{"version":3,"file":"static/js/263.1f849a30.chunk.js","mappings":"mUAaMA,EAAO,SAAH,GAAsE,IAAD,IAAhEC,EAAI,EAAJA,KAAMC,EAAY,EAAZA,aAAcC,EAAW,EAAXA,YAClC,GADmD,EAAJC,KAAkB,EAAZC,cACrBC,EAAAA,EAAAA,UAAS,KAAG,eAArCC,EAAQ,KAAEC,EAAW,MAE5BC,EAAAA,EAAAA,YAAU,WACTC,MAAMR,GACJS,MAAK,SAACC,GAAa,OAAKA,EAASC,MAAM,IACvCF,MAAK,SAACE,GACNL,EAAYK,EACb,GACF,GAAG,CAACX,IAEJ,IAAIY,EAAqC,QAAhC,EAAGC,SAASC,eAAef,UAAK,aAA7B,EAA+BgB,YACvCC,EAAsC,QAAhC,EAAGH,SAASC,eAAef,UAAK,aAA7B,EAA+BkB,aAC5C,OACC,iBAAKC,GAAG,OAAOC,UAAU,OAAM,UACnB,UAATpB,GAA6B,aAATA,IACrB,mBAAQoB,UAAU,iBAAiBC,QAAS,kBAAMnB,EAAY,WAAD,OAAYF,GAAO,EAAC,UAChF,sCAGS,aAATA,IACD,mBAAQoB,UAAU,iBAAiBC,QAAS,kBAAMnB,EAAY,KAAK,EAAC,UACnE,kCAGF,SAAC,KAAS,CAACoB,MAAO,CAAET,MAAOA,GAAgBU,EAAAA,GAAmBN,OAAQA,GAAiBO,EAAAA,IAAqBJ,UAAU,YAAW,UAC3H,SAAC,IAAa,CAACK,WAAY,CAC/BC,KAAI,YAAM,EAAJC,KAA+C,IAAzCC,EAAM,EAANA,OAAQR,EAAS,EAATA,UAAWS,EAAQ,EAARA,SAAaC,GAAK,YAC1CC,EAAQ,iBAAiBC,KAAKZ,GAAa,IACjD,OAAQQ,GAAUG,GACjB,SAAC,KAAiB,QAClBF,SAAUI,OAAOJ,GAAUK,QAAQ,MAAO,IAE1CZ,MAAOa,EAAAA,EACPC,SAAUL,EAAM,GAChBM,OAAO,OACHP,KAGL,iCAAMV,UAAWA,GAAeU,GAAK,aACnCD,IAGH,GAEDT,UAAU,WAAWkB,cAAe,CAACC,EAAAA,GAAYC,cAAe,CAACC,EAAAA,GAAYZ,SAAUvB,QAI3F,EAEA,GAAeoC,EAAAA,EAAAA,MAAK3C,E","sources":["components/Desktop/Apps/File/File.tsx"],"sourcesContent":["import React, { memo, useEffect, useState } from \"react\";\nimport \"styles/File.css\"\nimport ReactMarkdown from 'react-markdown'\nimport remarkGfm from \"remark-gfm\";\nimport rehypeRaw from \"rehype-raw\";\n\nimport {Prism as SyntaxHighlighter} from 'react-syntax-highlighter'\nimport {oneDark} from 'react-syntax-highlighter/dist/esm/styles/prism'\n\nimport { Scrollbar } from \"react-scrollbars-custom\";\nimport { IFile } from \"../../../../types\";\nimport { default_win_height, default_win_width } from \"../../../../consts\";\n\nconst File = ({name, content_path, spawnWindow, size, forcedUpdate}: IFile) => {\n\tconst [markdown, setMarkdown] = useState('');\n\n\tuseEffect(() => {\n\t\tfetch(content_path)\n\t\t\t.then((response: any) => response.text())\n\t\t\t.then((text) => {\n\t\t\t\tsetMarkdown(text);\n\t\t\t})\n\t}, [content_path]);\n\n\tlet width = document.getElementById(name)?.clientWidth;\n\tlet height = document.getElementById(name)?.clientHeight;\n\treturn (\n\t\t<div id=\"File\" className=\"file\">\n\t\t\t{ name !== \"101_C\" && name !== \"About me\" && \n\t\t\t\t<button className=\"subject-button\" onClick={() => spawnWindow(`Subject ${name}`)}>\n\t\t\t\t\t<h1>Subject</h1>\n\t\t\t\t</button>\n\t\t\t}\n\t\t\t{ name === \"About me\" && \n\t\t\t\t<button className=\"subject-button\" onClick={() => spawnWindow(`CV`)}>\n\t\t\t\t\t<h1>CV</h1>\n\t\t\t\t</button>\n\t\t\t}\n\t\t\t<Scrollbar style={{ width: width ? width : default_win_width, height: height? height : default_win_height}} className='Scrollbar'>\n      \t\t\t<ReactMarkdown components={{\n\t\t\t\t\tcode({node, inline, className, children, ...props}) {\n\t\t\t\t\t\tconst match = /language-(\\w+)/.exec(className || '')\n\t\t\t\t\t\treturn !inline && match ? (\n\t\t\t\t\t\t\t<SyntaxHighlighter\n\t\t\t\t\t\t\tchildren={String(children).replace(/\\n$/, '')}\n\t\t\t\t\t\t\t// @ts-ignore: next-line\n\t\t\t\t\t\t\tstyle={oneDark}\n\t\t\t\t\t\t\tlanguage={match[1]}\n\t\t\t\t\t\t\tPreTag=\"div\"\n\t\t\t\t\t\t\t{...props}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t<code className={className} {...props}>\n\t\t\t\t\t\t\t{children}\n\t\t\t\t\t\t</code>\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t}}\n\t\t\t\tclassName=\"markdown\" rehypePlugins={[rehypeRaw]} remarkPlugins={[remarkGfm]} children={markdown}/>\n\t\t\t</Scrollbar>\n\t\t</div>\n\t)\n}\n\nexport default memo(File);"],"names":["File","name","content_path","spawnWindow","size","forcedUpdate","useState","markdown","setMarkdown","useEffect","fetch","then","response","text","width","document","getElementById","clientWidth","height","clientHeight","id","className","onClick","style","default_win_width","default_win_height","components","code","node","inline","children","props","match","exec","String","replace","oneDark","language","PreTag","rehypePlugins","rehypeRaw","remarkPlugins","remarkGfm","memo"],"sourceRoot":""}